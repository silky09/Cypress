features:
1. Cypress takes SS as your tests run.
2. after execution, you can see all SS/videos in command log
3. it has debugging features
4. it has automatic wait features (no need to add additional wait)
5. it interacts with browser directly (does not use webdriver). so it is fast, consistent and reliable.
6. it has cross browser testing supports.
7. it is used to write all types of tests:
--> End-to-End tests
--> Integration tests
--> Unit tests

Prerequisite - Setting up Cypress environment:
--> node -v
--> npm -v   (node package manager)
pip : package installer for Python

Project Setup:
1. install Node.js
2. install VS code

3. in vscode terminal, first run command 
---> npm init -y (y means yes)
4. install cypress within local folder/Project to access easily
--> npm install cypress (incase not installed then use: npm install cypress@latest version number)
--> npx cypress -v
------>  (if required to install typescript use: npm install typescript)
then run this command to ensure that types for cypress are accessible by typescript. these types depends on dom and es6 so we pass them as lib option to typescript.
npx tsc --init --types cypress --lib dom,es6

npx is used to run npm command in the local folder.
5. to open cypress: use command: npx cypress open
(after that cypress folder will be seen in the side bar)

To write test: steps :
6. /// <reference types = "cypress" />
we use this because we telling the program to allow autocompletion 
in this script/ file from the 
cypress library or cypress node package so it becomes very handy and useful.

##. to write a test, we need a test runner - mocha
mocha comes inbuild with cypress.
(you do not need to install other test runner)

7. write test function: use "it" function/block

it("name of the test", function(){
   type cypress comands... 
   cy.visit('link of the website')
})

8. then run test using : npx cypress open
  or
node_modules/.bin/cypress open

"cypress is installed in node_modelules/.bin folder"

9. to terminate the program use: ctrl c

## to run the test on every changes write:
"watchForFileChanges":false 
in cypress.json file.
("watchForFileChanges":true) is set to bydefault.

10. to Access the elements: locators
#L2AGLb > .QS5gu
---> # means id
---> . means class

11. Access elements with text (instead of putting locators): 
cy.contains('All news about Sweden | Euronews').click()

12. if you use "only" property to a TC it means it will run those specific TC only.

13. add  {timeout: 6000} The first period waits for a matching request then run the code.
// default timeout is 4 secs

14. for taking screenshot:

it('Take a Screenshot', () => {
       cy.screenshot()
 })

 15. for running specific file: use an argument called --spec
after that relative path.
 -----> npx cypress run  --spec "cypress/integration/login_Test.js" 
------> npx cypress run -- spec "project2/cypress/integration/eCommerce_demoTest.js"    
(copy relative path of the file)  

 16. click({force: true}) means click forsefully.
 
 17.  Run Cypress Tests in Test Runner & Terminal :
 >>>> npx cypress open (to open test runner)
 >>>> npx cypress run (to run all the tests under integration folder in headless mode)
>>>> npx cypress run --headed (with --headed parameters we can see the execution or ui in the browser.)
 
----------------------------------------
npx cypress run --headed --config pageLoadTimeout=10000  --spec  "cypress/integration/loginTest.spec.js"

 
----------------------------------------
 18. headless means all TCs are executed in the backend.
 so we can not see any UI. 

 19. to run all the tests under integration folder using Chrome:

 npx cypress run --browser chrome

npx cypress run --headed --browser chrome

20. Scroll the window 500px down 

cy.scrollTo(0, 500) 

21. {forse : true}
    click('bottomLeft', { multiple: true })

    /// cy.click() can only be called on a single element.
     Your subject contained 13 elements. Pass { multiple: true } if you want to 
    serially click each element

22. Handling alert:

>> cypress by default take care of (close ) alert window.
>> it close the window without doing any manual action.
>>  we donot need to use any tool, or write any additional code/script for closing alert box.

>>>>>  but sometime, if you want to varify or validate something like messages in alert window, then
you have to write some piece of code.
(to create an event)

** expect(str).to.equal  or 
   expect(str).to.contain


1. window:alert (OK button on the alert gets clicked automatically)
----------------
 cy.on('window:alert',(str)=>{
         //assertions
 expect(t).to.contains('Your full name');
 })

----> (window:alert) event will capture the message to the particular variable (str)
----> str is a variable

2. window:confirm (The following confirmation pop-up with "OK" and "Cancel" buttons getting displayed.)
------------------
cy.on("window:confirm", (t) => {
         //verify text on pop-up
         expect(t).to.equal("message expecting");
      });

**** Implementation Cancel click:

after visit url script, place this code:

cy.on("window:confirm", (s) => {
         return false;
      });

then write get and click commands.
next script will be for verify Cancel click.

// verify application message on Cancel button click
      cy.get('#result').should('have.text', 'You clicked: Cancel')
   });

23. Handling Navigation with go() command.
 it contains 2 keywords:
   back and forward.

"back" is also represented by -1.
and "forward" is by 1.


It moves forward or backward to the next or previous URL in browser history.

The usage is as follows âˆ’

//like clicking back button
cy.go('back')
//like clicking forward button
cy.go('forward')



24. cy.reload() ---> used to refresh the package

25. // viewport to 100px and 500px
      
        cy.viewport(1000, 800)

26. Hooks:

   1. before : runs/executed once before all tests
   2. after : runs once all tests are done
   3. beforeEach : runs before every test block
   4. afterEach : runs after every test block


if same URL is placed in many TCs then you can keep 
that url in hook and use as an alias

ex:

beforeEach(() => {
   cy.visit('google.com').as('URL')
})

it runs before every testcases

27. Fixture : it is a file that contains some data.
and that particular data, we use in our TCs.
it is besically a data driven test.

i.e test will be driven by the data.
data can be in diff format like json, png, video,gif,txt etc.

28. POM : it is a design patterns where page objects are seperated 
from test scripts.
in pom, we create a seperate classes for each and every pages of the application.
and those classes having locators.

>> pom is useful in duplication and update.
>> add variables to replace hard code locators.

features: we can POM for 
1.reusability (we can reuse the class in multiple TCs)
2. maintainability


----------------------

github is a global reposetory: where we checkin our code.

-----------------------

29. Cypress dashboard service: will be connect from cypress test runner runs option.
   2 imp things for capturing and recording tests
1. project id  : "projectId": "5mrczb" (automatically add in cypress.json)
2. record keys

with these two things we can access cypress dashboard service.

npx cypress run --record --key 02c3ec2d-5f73-4a59-a32b-6f18d548e8e3

30. Cypress integration with Jenkins:

Jenkins is a CI continuos integration tool 
where we can configure our cypress project and
run our cypress scripts.

31. upload files:
   >  npm install --save-dev cypress-file-upload
   > If you are using TypeScript, ensure your tsconfig.json contains commands' types:

"compilerOptions": {
  "types": ["cypress", "cypress-file-upload"]
}

   > To be able to use any custom command you need to add it to cypress/support/commands.js like this:

import 'cypress-file-upload';

   > Then, make sure this commands.js is imported in cypress/support/index.js (it might be commented):

// Import commands.js using ES2015 syntax:
       import './commands';

   > usage:
   const path = 'img.png' (img should be stored in fixture folder)
   cy.get('').attachFile(path)

32. Download files: check https://www.npmjs.com/package/cypress-downloadfile for clear explanation.
follow step by step.

 only add this extra :

 npm install --save -dev cypress-downloadfile

 you can download any type of file like pdf, txt.

 If autocompletion does not work out of the box you can add the following line above your testfile

/// <reference types="cypress-downloadfile"/>

// first param => url of the image
// second param --> folder name
// third param --> file name

cy.downloadFile('first param','second param', 'third param')

33. REST-API testing---> CRUD methods

> If you make a cy.request() prior to visiting a page, Cypress assumes the host is the baseUrl 
property configured inside of your configuration(cypress.json) file

{
"baseUrl": "https://httpbin.org/"
}

> 

34. Alias : helps to reduce repetitive testing steps.
it allows us to delete the repetition statments.

ex: if same command or selectors are using in multiple place then use alias for time saving.
like: this line of code are found in many place then use alias 
cy.get('[name = "copy"]')

Alias:  cy.get('[name = "copy"]').as(copy)
and then 
         cy.get('@copy')    (simple and short)

35. instead of using multiple 'should' command use 'and' command.


36. generate HTML report:

>>>1.  npm i --save-dev cypress-mochawesome-reporter

>>>2. Change cypress reporter
config file (cypress.json by default)

  "reporter": "cypress-mochawesome-reporter",
  "reporterOptions": {
    "reportDir": "cypress/report",
    "charts": true,
    "reportPageTitle": "custom-title"
  }


>>>3. Add to cypress/support/index.js
import 'cypress-mochawesome-reporter/register';

>>>4. Add to cypress/plugins/index.js
module.exports = (on, config) => {
  require('cypress-mochawesome-reporter/plugin')(on);
};

>>>npx cypress run

>>>>if report is not displaying in html but showing in json format then
resolve this problem with putting  "" --reporter mochawesome  "" flag with file name while 
running in the terminal.

37. Cypress.config('defaultCommandTimeout', 8000)


instead of globally, use this time change to a particular before the test script.

38. Setting global environment using command line

1. npx cypress run --spec  "cypress/integration/Updated/GlobalVariable.spec.js" --env url=https://www.saucedemo.com/ --headed

2. in cypress.json,

"env":{
        "url":"https://www.saucedemo.com/"
      }

then update file, 
cy.visit(Cypress.env('url'))


39. always put POM in support folder not in integration folder.
and update the path as well.

40. Using cypress studio : 
----------------------
set in cypress.json,

>>> 1. "experimentalStudio": true,
>>>2.  "chromeWebSecurity": false

create one new empty file and open test runner and start this file.
there will be an option displays that is "Create test with Cypress studio".
just go through this.


41. Set script commands in package.json:
you can keep your test command as a variable  and use it in the terminal.

ex:
"scripts": {
    "test": "node_modules/.bin/cypress run",
    "headedTest": "npm run test -- --headed",
    "chromeTest": "npm run test -- --browser chrome",
    "recordDashBoardTest": "npm run test -- --record --key 02c3ec2d-5f73-4a59-a32b-6f18d548e8e3",
    "specFile": "npm run test -- --spec "path of the file""
  },

  in terminal, start your test with:
  npm run test /headedTest/ chromeTest/ recordDashBoardTest

  >>> if you want to run 2 file together then put those file in a seperate
  folder and put keep test name in package.json.
  >> you can put start (*) if you want to run all file.
>> you can not put 1 extra string within string 
so put forward slash (\) before second string in the both sides. see below:

  "specFile": "npm run test -- --spec \"cypress/integration/Updated/*\"


42. all will be applicable to run command for chrome browser execution:

>> 1. Cypress run -browser chrome
>> 2. Cypress run -b chrome
>> 3. Cypress run -b chrome headed

43. integration jenkins with github done: